<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>实现类似class的析构函数</title>
      <link href="/2021/02/20/language/go/struct_like_class/"/>
      <url>/2021/02/20/language/go/struct_like_class/</url>
      <content type="html"><![CDATA[<p>Go提供的revicer满足函数简单的method操作结构，但并没有提供构造与析构的机制，在有些场景下，我们仍然需要一些能自动释放资源的逻辑。</p><p>在Go进程模型中，维护了一种叫<code>finalizer</code>的结构，当内存对象不可访问、需要被GC时，GC程序会检查对象关联的<code>finalizer</code>函数，如果有，则调用一次<code>finalizer</code>函数，并移除关联的<code>finalizer</code>函数，然后该对象再次变成可访问状态，当下一次，该对象再次被GC时，便会被释放并回收。</p><p>在<code>runtime</code>包中，对外暴露了一个函数<code>SetFinalizer</code>，用来设置关联的<code>finalizer</code>函数。</p><a id="more"></a><h2 id="函数-runtime-SetFinalizer"><a href="#函数-runtime-SetFinalizer" class="headerlink" title="函数: runtime.SetFinalizer"></a>函数: <code>runtime.SetFinalizer</code></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetFinalizer</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;, finalizer <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br></pre></td></tr></table></figure><!--more--><h2 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h2><ol><li>定义<code>Initializer</code>接口，约定初始化函数</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Initializer<span class="built_in"> interface </span>&#123;</span><br><span class="line">Init()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义<code>Finalizer</code>接口，约定析构函数</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Finalizer<span class="built_in"> interface </span>&#123;</span><br><span class="line">Delete()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义<code>InitObject</code>函数用来初始化对象</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sample: `InitObject(obj)`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitObject</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果obj实现了Initializer</span></span><br><span class="line"><span class="keyword">if</span> ob, ok := obj.(Initializer); ok &#123;</span><br><span class="line">ob.Init()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果obj实现了Finalizer</span></span><br><span class="line"><span class="keyword">if</span> ob, ok := obj.(Finalizer); ok &#123;</span><br><span class="line">runtime.SetFinalizer(ob, <span class="function"><span class="keyword">func</span><span class="params">(ob Finalizer)</span></span> &#123;</span><br><span class="line">ob.Delete()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> sample <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Sample <span class="keyword">struct</span> &#123;</span><br><span class="line">*sample</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewSample returns a Sample.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSample</span><span class="params">()</span> *<span class="title">Sample</span></span> &#123;</span><br><span class="line"><span class="comment">// Private object</span></span><br><span class="line">s := &amp;sample&#123;&#125;</span><br><span class="line"><span class="comment">// Public object</span></span><br><span class="line">obj := &amp;Sample&#123;s&#125;</span><br><span class="line">&#123;</span><br><span class="line">InitObject(obj)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init方法会在NewSample时，跟随InitObject执行。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sample)</span> <span class="title">Init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"initialized\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete方法会在NewSample返回的obj需要被GC时调用。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sample)</span> <span class="title">Delete</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"deleted\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>如果对象存在循环引用，可能永远都不会被GC</li><li><code>finalizer</code>设置的函数只会在GC时被调用</li><li><code>finalizer</code>函数不适合处理太多耗时逻辑</li><li><code>finalizer</code>函数延长了对象的生命周期，如果不必要，尽量不使用</li></ul><p>我在一些项目中用到了自己封装的包，但只有少部分场景下用到了<code>Delete()</code>。</p><h2 id="代码包：github-com-thecxx-jarvis"><a href="#代码包：github-com-thecxx-jarvis" class="headerlink" title="代码包：github.com/thecxx/jarvis"></a>代码包：<a href="https://github.com/thecxx/jarvis" target="_blank" rel="noopener">github.com/thecxx/jarvis</a></h2>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis数据结构之hash</title>
      <link href="/2018/09/23/redis/type_hash/"/>
      <url>/2018/09/23/redis/type_hash/</url>
      <content type="html"><![CDATA[<p>hash数据结构在redis缓存中应用比较广泛，一般数据集合都会采用hash结构来进行存储，比如: session数据、在线用户记录等等。</p><a id="more"></a><h2 id="hash的创建"><a href="#hash的创建" class="headerlink" title="hash的创建"></a>hash的创建</h2><p>使用hash时最常使用hset用来设置字段(“/src/t_hash.c”文件中)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hsetCommand</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, created = <span class="number">0</span>;</span><br><span class="line">    robj *o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((c-&gt;argc % <span class="number">2</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        addReplyError(c,<span class="string">"wrong number of arguments for HMSET"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((o = hashTypeLookupWriteOrCreate(c,c-&gt;argv[<span class="number">1</span>])) == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    hashTypeTryConversion(o,c-&gt;argv,<span class="number">2</span>,c-&gt;argc<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; c-&gt;argc; i += <span class="number">2</span>)</span><br><span class="line">        created += !hashTypeSet(o,c-&gt;argv[i]-&gt;ptr,c-&gt;argv[i+<span class="number">1</span>]-&gt;ptr,HASH_SET_COPY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* HMSET (deprecated) and HSET return value is different. */</span></span><br><span class="line">    <span class="keyword">char</span> *cmdname = c-&gt;argv[<span class="number">0</span>]-&gt;ptr;</span><br><span class="line">    <span class="keyword">if</span> (cmdname[<span class="number">1</span>] == <span class="string">'s'</span> || cmdname[<span class="number">1</span>] == <span class="string">'S'</span>) &#123;</span><br><span class="line">        <span class="comment">/* HSET */</span></span><br><span class="line">        addReplyLongLong(c, created);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* HMSET */</span></span><br><span class="line">        addReply(c, shared.ok);</span><br><span class="line">    &#125;</span><br><span class="line">    signalModifiedKey(c-&gt;db,c-&gt;argv[<span class="number">1</span>]);</span><br><span class="line">    notifyKeyspaceEvent(NOTIFY_HASH,<span class="string">"hset"</span>,c-&gt;argv[<span class="number">1</span>],c-&gt;db-&gt;id);</span><br><span class="line">    server.dirty++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>hset执行时，首先会检查k-v对的数量是否匹配</li><li>然后查询客户端对应的当前db，查找key对应结构(没有则创建一个ziplist的结构对象)</li><li>获取到结果，再通过<code>hashTypeTryConversion</code>函数尝试转换为dict结构(根据参数值大小决定)</li><li><code>hsetCommand</code>结构根据参数的数量，可以同时支持<code>hset</code>与<code>hmset</code></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>参考: <a href="http://redisdoc.com/hash/index.html" target="_blank" rel="noopener">Hash</a></p>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PE文件加载器</title>
      <link href="/2018/09/10/windows/pe/pe_loader/"/>
      <url>/2018/09/10/windows/pe/pe_loader/</url>
      <content type="html"><![CDATA[<p>分享一份自己之前总结以前的代码写的dll内存加载库C++版本<strong>项目要自行编译生成lib文件</strong></p><p>支持：</p><ol><li>Win32标准Dll </li><li>MFC Dll </li><li>易语言Dll </li><li>其他环境下生成的Dll<br><strong>但</strong> 不能加壳加密(原因跟加载方式有关，未添加至进程模块链表)</li></ol><a id="more"></a><h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><p>File: include/ldr.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* __ldr_header__ */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LDR_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LDR_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"image.d.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"image.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinNT.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> Current platform is not supported</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">PVOID</span> <span class="params">(__stdcall *<span class="keyword">malloc_t</span>)</span> <span class="params">(ULONG)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">VOID</span>  <span class="params">(__stdcall *<span class="keyword">free_t</span>)</span>   <span class="params">(PVOID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">PVOID   <span class="title">LdrLoadImage</span>      <span class="params">(PVOID Buffer, DWORD Size, <span class="keyword">malloc_t</span> m = <span class="literal">NULL</span>, <span class="keyword">free_t</span> f = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"><span class="function">PVOID   <span class="title">LdrGetProcAddress</span> <span class="params">(PVOID Addr, LPCSTR Name)</span></span>;</span><br><span class="line"><span class="function">VOID    <span class="title">LdrFreeImage</span>      <span class="params">(PVOID Addr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>File: image/traps/GetModuleHandleW.asm</p><p>加入汇编代码主要是为了做中间层hook处理，否则非正常加载的模块部分接口不可用</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">.386</span></span><br><span class="line"><span class="meta">.Model</span> flat, StdCall</span><br><span class="line"><span class="meta">Option</span> CaseMap: none</span><br><span class="line"> </span><br><span class="line">Include    trap.inc</span><br><span class="line"> </span><br><span class="line"><span class="meta">.Const</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">.Data</span>?</span><br><span class="line"> </span><br><span class="line"><span class="meta">.Data</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">.Code</span></span><br><span class="line"> </span><br><span class="line">GetModuleHandleWTrap Proc Uses <span class="built_in">Ebx</span> <span class="built_in">Ecx</span> <span class="built_in">Edx</span> <span class="built_in">Esi</span> <span class="built_in">Edi</span>, lpModuleName: <span class="built_in">Ptr</span> WCHAR</span><br><span class="line">    <span class="comment">; Mov Esi, 0x********</span></span><br><span class="line">    Mov_Esi_Information</span><br><span class="line">    <span class="comment">; Pointer to ImageInformation</span></span><br><span class="line">    <span class="meta">Assume</span> <span class="built_in">Esi</span>: <span class="built_in">Ptr</span> ImageInformation</span><br><span class="line"> </span><br><span class="line"><span class="meta">    .If</span> lpModuleName == <span class="number">0</span></span><br><span class="line">        <span class="keyword">Push</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">Call</span> [<span class="built_in">Esi</span>].traps[SizeOf ImageTrap * TRAP_ID_GET_MODULE_HANDLE_W].procedure</span><br><span class="line"><span class="meta">    .Else</span></span><br><span class="line">        <span class="keyword">Lea</span> <span class="built_in">Ebx</span>, [<span class="built_in">Esi</span>].ModuleNameW</span><br><span class="line">        <span class="keyword">Push</span> <span class="built_in">Ebx</span></span><br><span class="line">        <span class="keyword">Push</span> lpModuleName</span><br><span class="line">        <span class="keyword">Call</span> [<span class="built_in">Esi</span>].apis.lstrcmpiW</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">Cmp</span> <span class="built_in">Eax</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">Je</span> __COPY</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">Lea</span> <span class="built_in">Ebx</span>, [<span class="built_in">Esi</span>].ModuleBaseNameW</span><br><span class="line">        <span class="keyword">Push</span> <span class="built_in">Ebx</span></span><br><span class="line">        <span class="keyword">Push</span> lpModuleName</span><br><span class="line">        <span class="keyword">Call</span> [<span class="built_in">Esi</span>].apis.lstrcmpiW  </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">Cmp</span> <span class="built_in">Eax</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">Jne</span> __<span class="keyword">CALL</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol">    __COPY:</span></span><br><span class="line">        <span class="keyword">Mov</span> <span class="built_in">Eax</span>, [<span class="built_in">Esi</span>].imagebase</span><br><span class="line">        <span class="keyword">Jmp</span> @F</span><br><span class="line"> </span><br><span class="line"><span class="symbol">    __CALL:</span>   </span><br><span class="line">        <span class="keyword">Push</span> lpModuleName</span><br><span class="line">        <span class="keyword">Call</span> [<span class="built_in">Esi</span>].traps[SizeOf ImageTrap * TRAP_ID_GET_MODULE_HANDLE_W].procedure</span><br><span class="line">    @@:</span><br><span class="line"><span class="meta">    .EndIf</span></span><br><span class="line"> </span><br><span class="line">    Return <span class="built_in">Eax</span></span><br><span class="line">GetModuleHandleWTrap EndP</span><br><span class="line"> </span><br><span class="line">End</span><br></pre></td></tr></table></figure><h2 id="使用接口-对应关系"><a href="#使用接口-对应关系" class="headerlink" title="使用接口(对应关系)"></a>使用接口(对应关系)</h2><ul><li>LdrLoadImage      = LoadLibrary</li><li>LdrGetProcAddress = GetProcAddress</li><li>LdrFreeImage      = FreeLibrary</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/kamichan/image" target="_blank" rel="noopener">https://github.com/thecxx/image</a></p>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis中常用数据结构</title>
      <link href="/2018/09/10/redis/types/"/>
      <url>/2018/09/10/redis/types/</url>
      <content type="html"><![CDATA[<p>redis不仅支持最简单的k-v数据，还提供其他多种场景可用的数据结构: hash/list/set/zset等等。</p><ul><li><strong><a href="/2018/09/23/redis/type_hash/">hash</a></strong></li><li><strong><a href="#">list</a></strong></li><li><strong><a href="#">set</a></strong></li><li><strong><a href="#">zset</a></strong></li></ul><a id="more"></a><h2 id="redis数据存储"><a href="#redis数据存储" class="headerlink" title="redis数据存储"></a>redis数据存储</h2><p>redis维护的db数据结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    dict *dict;                 <span class="comment">/* The keyspace for this DB */</span></span><br><span class="line">    dict *expires;              <span class="comment">/* Timeout of keys with a timeout set */</span></span><br><span class="line">    dict *blocking_keys;        <span class="comment">/* Keys with clients waiting for data (BLPOP)*/</span></span><br><span class="line">    dict *ready_keys;           <span class="comment">/* Blocked keys that received a PUSH */</span></span><br><span class="line">    dict *watched_keys;         <span class="comment">/* WATCHED keys for MULTI/EXEC CAS */</span></span><br><span class="line">    <span class="keyword">int</span> id;                     <span class="comment">/* Database ID */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> avg_ttl;          <span class="comment">/* Average TTL, just for stats */</span></span><br><span class="line">    <span class="built_in">list</span> *defrag_later;         <span class="comment">/* List of key names to attempt to defrag one by one, gradually. */</span></span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure></p><ul><li>dict: 保存的是当前db中所有key的一个dict结构</li></ul><p>从一个指定db的dict结构中查找到对应<code>redisObject</code>结构的对象<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> lru:LRU_BITS; <span class="comment">/* LRU time (relative to global lru_clock) or</span></span><br><span class="line"><span class="comment">                            * LFU data (least significant 8 bits frequency</span></span><br><span class="line"><span class="comment">                            * and most significant 16 bits access time). */</span></span><br><span class="line">    <span class="keyword">int</span> refcount;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure></p><ul><li>通过给定的命令，检查数据是否可操作</li><li>redis默认db数量为16</li></ul>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go语言监听进程退出信号</title>
      <link href="/2018/09/10/language/go/when_process_exit/"/>
      <url>/2018/09/10/language/go/when_process_exit/</url>
      <content type="html"><![CDATA[<p>项目中经常需要在进程退出时处理一些资源回收操作，打开的资源需要关闭，创建的临时数据需要销毁等等…</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>通过<code>os/signal</code>包来获取进程信号接收管道，用一个goroutine来等待指定的信号</p><a id="more"></a><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/signal"</span></span><br><span class="line"><span class="string">"syscall"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">exitHandlers []<span class="function"><span class="keyword">func</span><span class="params">(os.Signal)</span></span></span><br><span class="line"><span class="function">)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 捕获进程退出信号，执行回调</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">WhenExit</span><span class="params">(handler <span class="keyword">func</span>(os.Signal)</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(exitHandlers) == <span class="number">0</span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">sigs := []os.Signal&#123;</span><br><span class="line">syscall.SIGHUP,</span><br><span class="line">syscall.SIGINT,</span><br><span class="line">syscall.SIGTERM,</span><br><span class="line">syscall.SIGQUIT,</span><br><span class="line">syscall.SIGUSR1,</span><br><span class="line">syscall.SIGUSR2,</span><br><span class="line">&#125;</span><br><span class="line">signal.Notify(ch, sigs...)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := &lt;-ch</span><br><span class="line"><span class="keyword">for</span> _, handler := <span class="keyword">range</span> exitHandlers &#123;</span><br><span class="line">handler(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 增加退出回调</span></span><br><span class="line">exitHandlers = <span class="built_in">append</span>(exitHandlers, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WhenExit(<span class="function"><span class="keyword">func</span><span class="params">(sig os.Signal)</span></span> &#123;</span><br><span class="line">    <span class="comment">// @todo something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅析redis启动流程</title>
      <link href="/2018/08/24/redis/startup/"/>
      <url>/2018/08/24/redis/startup/</url>
      <content type="html"><![CDATA[<h2 id="如何启动"><a href="#如何启动" class="headerlink" title="如何启动?"></a>如何启动?</h2><p>启动命令: <code>redis-server redis.conf</code></p><h2 id="启动细节"><a href="#启动细节" class="headerlink" title="启动细节"></a>启动细节</h2><h3 id="程序入口main"><a href="#程序入口main" class="headerlink" title="程序入口main"></a>程序入口main</h3><p>main函数做为c语言程序入口，redis中的main函数在文件”/src/server.c”中</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> REDIS_TEST</span></span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">3</span> &amp;&amp; !strcasecmp(argv[<span class="number">1</span>], <span class="string">"test"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"ziplist"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ziplistTest(argc, argv);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"quicklist"</span>)) &#123;</span><br><span class="line">            quicklistTest(argc, argv);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"intset"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> intsetTest(argc, argv);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"zipmap"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> zipmapTest(argc, argv);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"sha1test"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> sha1Test(argc, argv);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"util"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> utilTest(argc, argv);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"sds"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdsTest(argc, argv);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"endianconv"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> endianconvTest(argc, argv);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">2</span>], <span class="string">"crc64"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> crc64Test(argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">/* test not found */</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We need to initialize our libraries, and the server configuration. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> INIT_SETPROCTITLE_REPLACEMENT</span></span><br><span class="line">    spt_init(argc, argv);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置本地化</span></span><br><span class="line">    setlocale(LC_COLLATE,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置时区</span></span><br><span class="line">    tzset(); <span class="comment">/* Populates 'timezone' global. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// OOM保护机制的处理接口</span></span><br><span class="line">    zmalloc_set_oom_handler(redisOutOfMemoryHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成随机种子</span></span><br><span class="line">    srand(time(<span class="literal">NULL</span>)^getpid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取时间</span></span><br><span class="line">    gettimeofday(&amp;tv,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一个随机16位长度字符串，用于后续使用生成hash(siphash)值时</span></span><br><span class="line">    <span class="keyword">char</span> hashseed[<span class="number">16</span>];</span><br><span class="line">    getRandomHexChars(hashseed,<span class="keyword">sizeof</span>(hashseed));</span><br><span class="line">    dictSetHashFunctionSeed((<span class="keyword">uint8_t</span>*)hashseed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测是否启用sentinel</span></span><br><span class="line">    server.sentinel_mode = checkForSentinelMode(argc,argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化服务器配置</span></span><br><span class="line">    initServerConfig();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化模块系统</span></span><br><span class="line">    moduleInitModulesSystem();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Store the executable path and arguments in a safe place in order</span></span><br><span class="line"><span class="comment">     * to be able to restart the server later. */</span></span><br><span class="line">    server.executable = getAbsolutePath(argv[<span class="number">0</span>]);</span><br><span class="line">    server.exec_argv = zmalloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span>*)*(argc+<span class="number">1</span>));</span><br><span class="line">    server.exec_argv[argc] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; argc; j++) server.exec_argv[j] = zstrdup(argv[j]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要启动sentinel，则进行sentinel的初始化工作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We need to init sentinel right now as parsing the configuration file</span></span><br><span class="line"><span class="comment">     * in sentinel mode will have the effect of populating the sentinel</span></span><br><span class="line"><span class="comment">     * data structures with master nodes to monitor. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.sentinel_mode) &#123;</span><br><span class="line">        initSentinelConfig();</span><br><span class="line">        initSentinel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如只需检测rdb/aof是否正常可用，则检测完退出启动流程</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if we need to start in redis-check-rdb/aof mode. We just execute</span></span><br><span class="line"><span class="comment">     * the program main. However the program is part of the Redis executable</span></span><br><span class="line"><span class="comment">     * so that we can easily execute an RDB check on loading errors. */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(argv[<span class="number">0</span>],<span class="string">"redis-check-rdb"</span>) != <span class="literal">NULL</span>)</span><br><span class="line">        redis_check_rdb_main(argc,argv,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(argv[<span class="number">0</span>],<span class="string">"redis-check-aof"</span>) != <span class="literal">NULL</span>)</span><br><span class="line">        redis_check_aof_main(argc,argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        j = <span class="number">1</span>; <span class="comment">/* First option to parse in argv[] */</span></span><br><span class="line">        sds options = sdsempty();</span><br><span class="line">        <span class="keyword">char</span> *configfile = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看版本/help相关操作，会在执行之后退出启动流程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Handle special options --help and --version */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-v"</span>) == <span class="number">0</span> ||</span><br><span class="line">            <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--version"</span>) == <span class="number">0</span>) version();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--help"</span>) == <span class="number">0</span> ||</span><br><span class="line">            <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-h"</span>) == <span class="number">0</span>) usage();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--test-memory"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (argc == <span class="number">3</span>) &#123;</span><br><span class="line">                memtest(atoi(argv[<span class="number">2</span>]),<span class="number">50</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Please specify the amount of memory to test in megabytes.\n"</span>);</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Example: ./redis-server --test-memory 4096\n\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 命令行参数格式: --参数名(上面-v/-h等参数特殊处理除外)</span></span><br><span class="line">        <span class="comment">// 第一个参数必须是非"--"前缀格式才做为配置文件解析</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* First argument is the config file name? */</span></span><br><span class="line">        <span class="keyword">if</span> (argv[j][<span class="number">0</span>] != <span class="string">'-'</span> || argv[j][<span class="number">1</span>] != <span class="string">'-'</span>) &#123;</span><br><span class="line">            configfile = argv[j];</span><br><span class="line">            server.configfile = getAbsolutePath(configfile);</span><br><span class="line">            <span class="comment">/* Replace the config file in server.exec_argv with</span></span><br><span class="line"><span class="comment">             * its absolute path. */</span></span><br><span class="line">            zfree(server.exec_argv[j]);</span><br><span class="line">            server.exec_argv[j] = zstrdup(server.configfile);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* All the other options are parsed and conceptually appended to the</span></span><br><span class="line"><span class="comment">         * configuration file. For instance --port 6380 will generate the</span></span><br><span class="line"><span class="comment">         * string "port 6380\n" to be parsed after the actual file name</span></span><br><span class="line"><span class="comment">         * is parsed, if any. */</span></span><br><span class="line">        <span class="keyword">while</span>(j != argc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (argv[j][<span class="number">0</span>] == <span class="string">'-'</span> &amp;&amp; argv[j][<span class="number">1</span>] == <span class="string">'-'</span>) &#123;</span><br><span class="line">                <span class="comment">/* Option name */</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[j], <span class="string">"--check-rdb"</span>)) &#123;</span><br><span class="line">                    <span class="comment">/* Argument has no options, need to skip for parsing. */</span></span><br><span class="line">                    j++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sdslen(options)) options = sdscat(options,<span class="string">"\n"</span>);</span><br><span class="line">                options = sdscat(options,argv[j]+<span class="number">2</span>);</span><br><span class="line">                options = sdscat(options,<span class="string">" "</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* Option argument */</span></span><br><span class="line">                options = sdscatrepr(options,argv[j],<span class="built_in">strlen</span>(argv[j]));</span><br><span class="line">                options = sdscat(options,<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (server.sentinel_mode &amp;&amp; configfile &amp;&amp; *configfile == <span class="string">'-'</span>) &#123;</span><br><span class="line">            serverLog(LL_WARNING,</span><br><span class="line">                <span class="string">"Sentinel config from STDIN not allowed."</span>);</span><br><span class="line">            serverLog(LL_WARNING,</span><br><span class="line">                <span class="string">"Sentinel needs config file on disk to save state.  Exiting..."</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        resetServerSaveParams();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载配置文件，同时会将命令行参数追加到配置中，解析配置时会进行覆盖</span></span><br><span class="line">        loadServerConfig(configfile,options);</span><br><span class="line"></span><br><span class="line">        sdsfree(options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serverLog(LL_WARNING, <span class="string">"oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo"</span>);</span><br><span class="line">    serverLog(LL_WARNING,</span><br><span class="line">        <span class="string">"Redis version=%s, bits=%d, commit=%s, modified=%d, pid=%d, just started"</span>,</span><br><span class="line">            REDIS_VERSION,</span><br><span class="line">            (<span class="keyword">sizeof</span>(<span class="keyword">long</span>) == <span class="number">8</span>) ? <span class="number">64</span> : <span class="number">32</span>,</span><br><span class="line">            redisGitSHA1(),</span><br><span class="line">            strtol(redisGitDirty(),<span class="literal">NULL</span>,<span class="number">10</span>) &gt; <span class="number">0</span>,</span><br><span class="line">            (<span class="keyword">int</span>)getpid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">"Warning: no config file specified, using the default config. In order to specify a config file use %s /path/to/%s.conf"</span>, argv[<span class="number">0</span>], server.sentinel_mode ? <span class="string">"sentinel"</span> : <span class="string">"redis"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">"Configuration loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否启用后台进程，如果启用则当前进程将在创建子进程成功之后退出</span></span><br><span class="line"></span><br><span class="line">    server.supervised = redisIsSupervised(server.supervised_mode);</span><br><span class="line">    <span class="keyword">int</span> background = server.daemonize &amp;&amp; !server.supervised;</span><br><span class="line">    <span class="keyword">if</span> (background) daemonize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化服务器各项结构</span></span><br><span class="line">    initServer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (background || server.pidfile) createPidFile();</span><br><span class="line">    redisSetProcTitle(argv[<span class="number">0</span>]);</span><br><span class="line">    redisAsciiArt();</span><br><span class="line">    checkTcpBacklogSettings();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!server.sentinel_mode) &#123;</span><br><span class="line">        <span class="comment">/* Things not needed when running in Sentinel mode. */</span></span><br><span class="line">        serverLog(LL_WARNING,<span class="string">"Server initialized"</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> __linux__</span></span><br><span class="line">        linuxMemoryWarnings();</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过模块队列加载模块</span></span><br><span class="line">        moduleLoadFromQueue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过aof/rdb加载数据</span></span><br><span class="line">        loadDataFromDisk();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server.cluster_enabled) &#123;</span><br><span class="line">            <span class="keyword">if</span> (verifyClusterConfigWithData() == C_ERR) &#123;</span><br><span class="line">                serverLog(LL_WARNING,</span><br><span class="line">                    <span class="string">"You can't have keys in a DB different than DB 0 when in "</span></span><br><span class="line">                    <span class="string">"Cluster mode. Exiting."</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (server.ipfd_count &gt; <span class="number">0</span>)</span><br><span class="line">            serverLog(LL_NOTICE,<span class="string">"Ready to accept connections"</span>);</span><br><span class="line">        <span class="keyword">if</span> (server.sofd &gt; <span class="number">0</span>)</span><br><span class="line">            serverLog(LL_NOTICE,<span class="string">"The server is now ready to accept connections at %s"</span>, server.unixsocket);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sentinelIsRunning();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Warning the user about suspicious maxmemory setting. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.maxmemory &gt; <span class="number">0</span> &amp;&amp; server.maxmemory &lt; <span class="number">1024</span>*<span class="number">1024</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING,<span class="string">"WARNING: You specified a maxmemory value that is less than 1MB (current value is %llu bytes). Are you sure this is what you really want?"</span>, server.maxmemory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进入主循环的一次回调</span></span><br><span class="line">    aeSetBeforeSleepProc(server.el,beforeSleep);</span><br><span class="line">    <span class="comment">// 监听到事件之后的一次回调</span></span><br><span class="line">    aeSetAfterSleepProc(server.el,afterSleep);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启事件循环</span></span><br><span class="line">    aeMain(server.el);</span><br><span class="line"></span><br><span class="line">    aeDeleteEventLoop(server.el);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件循环aeMain"><a href="#事件循环aeMain" class="headerlink" title="事件循环aeMain"></a>事件循环aeMain</h3><p>服务启动之后，初始化完毕，就开始执行事件循环系统(“/src/ae.c”文件中)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aeMain</span><span class="params">(aeEventLoop *eventLoop)</span> </span>&#123;</span><br><span class="line">    eventLoop-&gt;stop = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!eventLoop-&gt;stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventLoop-&gt;beforesleep != <span class="literal">NULL</span>)</span><br><span class="line">            eventLoop-&gt;beforesleep(eventLoop);</span><br><span class="line">        <span class="comment">// 处理事件</span></span><br><span class="line">        aeProcessEvents(eventLoop, AE_ALL_EVENTS|AE_CALL_AFTER_SLEEP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="循环前的beforesleep"><a href="#循环前的beforesleep" class="headerlink" title="循环前的beforesleep"></a>循环前的beforesleep</h3><p>关于<code>beforesleep</code>的代码也整理出来看看<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function gets called every time Redis is entering the</span></span><br><span class="line"><span class="comment"> * main loop of the event driven library, that is, before to sleep</span></span><br><span class="line"><span class="comment"> * for ready file descriptors. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeSleep</span><span class="params">(struct aeEventLoop *eventLoop)</span> </span>&#123;</span><br><span class="line">    UNUSED(eventLoop);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Call the Redis Cluster before sleep function. Note that this function</span></span><br><span class="line"><span class="comment">     * may change the state of Redis Cluster (from ok to fail or vice versa),</span></span><br><span class="line"><span class="comment">     * so it's a good idea to call it before serving the unblocked clients</span></span><br><span class="line"><span class="comment">     * later in this function. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.cluster_enabled) clusterBeforeSleep();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Key过期处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Run a fast expire cycle (the called function will return</span></span><br><span class="line"><span class="comment">     * ASAP if a fast cycle is not needed). */</span></span><br><span class="line">    <span class="keyword">if</span> (server.active_expire_enabled &amp;&amp; server.masterhost == <span class="literal">NULL</span>)</span><br><span class="line">        activeExpireCycle(ACTIVE_EXPIRE_CYCLE_FAST);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跟slave库的联系/数据的同步等等</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Send all the slaves an ACK request if at least one client blocked</span></span><br><span class="line"><span class="comment">     * during the previous event loop iteration. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.get_ack_from_slaves) &#123;</span><br><span class="line">        robj *argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        argv[<span class="number">0</span>] = createStringObject(<span class="string">"REPLCONF"</span>,<span class="number">8</span>);</span><br><span class="line">        argv[<span class="number">1</span>] = createStringObject(<span class="string">"GETACK"</span>,<span class="number">6</span>);</span><br><span class="line">        argv[<span class="number">2</span>] = createStringObject(<span class="string">"*"</span>,<span class="number">1</span>); <span class="comment">/* Not used argument. */</span></span><br><span class="line">        replicationFeedSlaves(server.slaves, server.slaveseldb, argv, <span class="number">3</span>);</span><br><span class="line">        decrRefCount(argv[<span class="number">0</span>]);</span><br><span class="line">        decrRefCount(argv[<span class="number">1</span>]);</span><br><span class="line">        decrRefCount(argv[<span class="number">2</span>]);</span><br><span class="line">        server.get_ack_from_slaves = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理上一个循环中未响应完的处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Unblock all the clients blocked for synchronous replication</span></span><br><span class="line"><span class="comment">     * in WAIT. */</span></span><br><span class="line">    <span class="keyword">if</span> (listLength(server.clients_waiting_acks))</span><br><span class="line">        processClientsWaitingReplicas();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if there are clients unblocked by modules that implement</span></span><br><span class="line"><span class="comment">     * blocking commands. */</span></span><br><span class="line">    moduleHandleBlockedClients();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Try to process pending commands for clients that were just unblocked. */</span></span><br><span class="line">    <span class="keyword">if</span> (listLength(server.unblocked_clients))</span><br><span class="line">        processUnblockedClients();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// aof的处理(不是执行一条命令就追加一条，是在一个循环完，开始一个新的循环之前落地到磁盘)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Write the AOF buffer on disk */</span></span><br><span class="line">    flushAppendOnlyFile(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Handle writes with pending output buffers. */</span></span><br><span class="line">    handleClientsWithPendingWrites();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Before we are going to sleep, let the threads access the dataset by</span></span><br><span class="line"><span class="comment">     * releasing the GIL. Redis main thread will not touch anything at this</span></span><br><span class="line"><span class="comment">     * time. */</span></span><br><span class="line">    <span class="keyword">if</span> (moduleCount()) moduleReleaseGIL();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="事件处理aeProcessEvents"><a href="#事件处理aeProcessEvents" class="headerlink" title="事件处理aeProcessEvents"></a>事件处理aeProcessEvents</h3><p>系统主要处理两种事件: 一种时间事件，一种网络事件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Process every pending time event, then every pending file event</span></span><br><span class="line"><span class="comment"> * (that may be registered by time event callbacks just processed).</span></span><br><span class="line"><span class="comment"> * Without special flags the function sleeps until some file event</span></span><br><span class="line"><span class="comment"> * fires, or when the next time event occurs (if any).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If flags is 0, the function does nothing and returns.</span></span><br><span class="line"><span class="comment"> * if flags has AE_ALL_EVENTS set, all the kind of events are processed.</span></span><br><span class="line"><span class="comment"> * if flags has AE_FILE_EVENTS set, file events are processed.</span></span><br><span class="line"><span class="comment"> * if flags has AE_TIME_EVENTS set, time events are processed.</span></span><br><span class="line"><span class="comment"> * if flags has AE_DONT_WAIT set the function returns ASAP until all</span></span><br><span class="line"><span class="comment"> * if flags has AE_CALL_AFTER_SLEEP set, the aftersleep callback is called.</span></span><br><span class="line"><span class="comment"> * the events that's possible to process without to wait are processed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The function returns the number of events processed. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">aeProcessEvents</span><span class="params">(aeEventLoop *eventLoop, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> processed = <span class="number">0</span>, numevents;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Nothing to do? return ASAP */</span></span><br><span class="line">    <span class="keyword">if</span> (!(flags &amp; AE_TIME_EVENTS) &amp;&amp; !(flags &amp; AE_FILE_EVENTS)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note that we want call select() even if there are no</span></span><br><span class="line"><span class="comment">     * file events to process as long as we want to process time</span></span><br><span class="line"><span class="comment">     * events, in order to sleep until the next time event is ready</span></span><br><span class="line"><span class="comment">     * to fire. */</span></span><br><span class="line">    <span class="keyword">if</span> (eventLoop-&gt;maxfd != <span class="number">-1</span> ||</span><br><span class="line">        ((flags &amp; AE_TIME_EVENTS) &amp;&amp; !(flags &amp; AE_DONT_WAIT))) &#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        aeTimeEvent *shortest = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>, *<span class="title">tvp</span>;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flags &amp; AE_TIME_EVENTS &amp;&amp; !(flags &amp; AE_DONT_WAIT))</span><br><span class="line">            shortest = aeSearchNearestTimer(eventLoop);</span><br><span class="line">        <span class="keyword">if</span> (shortest) &#123;</span><br><span class="line">            <span class="keyword">long</span> now_sec, now_ms;</span><br><span class="line"></span><br><span class="line">            aeGetTime(&amp;now_sec, &amp;now_ms);</span><br><span class="line">            tvp = &amp;tv;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* How many milliseconds we need to wait for the next</span></span><br><span class="line"><span class="comment">             * time event to fire? */</span></span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> ms =</span><br><span class="line">                (shortest-&gt;when_sec - now_sec)*<span class="number">1000</span> +</span><br><span class="line">                shortest-&gt;when_ms - now_ms;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ms &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                tvp-&gt;tv_sec = ms/<span class="number">1000</span>;</span><br><span class="line">                tvp-&gt;tv_usec = (ms % <span class="number">1000</span>)*<span class="number">1000</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tvp-&gt;tv_sec = <span class="number">0</span>;</span><br><span class="line">                tvp-&gt;tv_usec = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* If we have to check for events but need to return</span></span><br><span class="line"><span class="comment">             * ASAP because of AE_DONT_WAIT we need to set the timeout</span></span><br><span class="line"><span class="comment">             * to zero */</span></span><br><span class="line">            <span class="keyword">if</span> (flags &amp; AE_DONT_WAIT) &#123;</span><br><span class="line">                tv.tv_sec = tv.tv_usec = <span class="number">0</span>;</span><br><span class="line">                tvp = &amp;tv;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* Otherwise we can block */</span></span><br><span class="line">                tvp = <span class="literal">NULL</span>; <span class="comment">/* wait forever */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// tvp是等待时间，是距离下一个最近的时间事件的时间距离</span></span><br><span class="line">        <span class="comment">// redis的循环事件是不等待的</span></span><br><span class="line">        <span class="comment">// aeProcessEvents(eventLoop, AE_ALL_EVENTS|AE_CALL_AFTER_SLEEP);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Call the multiplexing API, will return only on timeout or when</span></span><br><span class="line"><span class="comment">         * some event fires. */</span></span><br><span class="line">        numevents = aeApiPoll(eventLoop, tvp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* After sleep callback. */</span></span><br><span class="line">        <span class="keyword">if</span> (eventLoop-&gt;aftersleep != <span class="literal">NULL</span> &amp;&amp; flags &amp; AE_CALL_AFTER_SLEEP)</span><br><span class="line">            eventLoop-&gt;aftersleep(eventLoop);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; numevents; j++) &#123;</span><br><span class="line">            aeFileEvent *fe = &amp;eventLoop-&gt;events[eventLoop-&gt;fired[j].fd];</span><br><span class="line">            <span class="keyword">int</span> mask = eventLoop-&gt;fired[j].mask;</span><br><span class="line">            <span class="keyword">int</span> fd = eventLoop-&gt;fired[j].fd;</span><br><span class="line">            <span class="keyword">int</span> fired = <span class="number">0</span>; <span class="comment">/* Number of events fired for current fd. */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Normally we execute the readable event first, and the writable</span></span><br><span class="line"><span class="comment">             * event laster. This is useful as sometimes we may be able</span></span><br><span class="line"><span class="comment">             * to serve the reply of a query immediately after processing the</span></span><br><span class="line"><span class="comment">             * query.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * However if AE_BARRIER is set in the mask, our application is</span></span><br><span class="line"><span class="comment">             * asking us to do the reverse: never fire the writable event</span></span><br><span class="line"><span class="comment">             * after the readable. In such a case, we invert the calls.</span></span><br><span class="line"><span class="comment">             * This is useful when, for instance, we want to do things</span></span><br><span class="line"><span class="comment">             * in the beforeSleep() hook, like fsynching a file to disk,</span></span><br><span class="line"><span class="comment">             * before replying to a client. */</span></span><br><span class="line">            <span class="keyword">int</span> invert = fe-&gt;mask &amp; AE_BARRIER;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Note the "fe-&gt;mask &amp; mask &amp; ..." code: maybe an already</span></span><br><span class="line"><span class="comment">             * processed event removed an element that fired and we still</span></span><br><span class="line"><span class="comment">             * didn't processed, so we check if the event is still valid.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * Fire the readable event if the call sequence is not</span></span><br><span class="line"><span class="comment">             * inverted. */</span></span><br><span class="line">            <span class="keyword">if</span> (!invert &amp;&amp; fe-&gt;mask &amp; mask &amp; AE_READABLE) &#123;</span><br><span class="line">                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                fired++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Fire the writable event. */</span></span><br><span class="line">            <span class="keyword">if</span> (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc) &#123;</span><br><span class="line">                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                    fired++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* If we have to invert the call, fire the readable event now</span></span><br><span class="line"><span class="comment">             * after the writable one. */</span></span><br><span class="line">            <span class="keyword">if</span> (invert &amp;&amp; fe-&gt;mask &amp; mask &amp; AE_READABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc) &#123;</span><br><span class="line">                    fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                    fired++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            processed++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Check time events */</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; AE_TIME_EVENTS)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理时间事件</span></span><br><span class="line">        processed += processTimeEvents(eventLoop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> processed; <span class="comment">/* return the number of processed file/time events */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><ul><li>主程序中进行各项程序初始化/服务初始化/模块初始化等等</li><li>系统初始化结束启动事件循环系统</li><li>对于客户端的相关读写操作均才用单线程模式处理</li><li>对于部分低级别任务采用后台线程异步处理</li></ul>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>静态博客实现动态交互</title>
      <link href="/2017/08/30/blog/interaction/"/>
      <url>/2017/08/30/blog/interaction/</url>
      <content type="html"><![CDATA[<p>静态博客没有动态的脚本，都是html/js/css形式的文件组成，想要实现动态的交互，需要借助第三方的一些渠道来实现。在之前，我的博客都是使用<del><strong><a href="#">多说</a></strong>(服务已经关闭)</del>来做动态评论，但是今天发现多说原来已经关闭了，于是重新找了一个替代服务：<strong><a href="//changyan.kuaizhan.com">搜狐畅言</a></strong>。</p><h2 id="申请畅言帐号"><a href="#申请畅言帐号" class="headerlink" title="申请畅言帐号"></a>申请畅言帐号</h2><p>首先，进去<a href="//changyan.kuaizhan.com">搜狐畅言</a>注册帐号，按照提示，一步一步对自己的站点做好配置，主要的一点是，畅言的站点必须备案过，还要过审核还能正常使用，不然只能使用15天。</p><a id="more"></a><h2 id="安装畅言代码"><a href="#安装畅言代码" class="headerlink" title="安装畅言代码"></a>安装畅言代码</h2><p>对于外挂式评论功能模块，都会提供一份嵌入代码，畅言也在帐号的管理后台提供了一份嵌入代码，代码提供三中平台使用，PC、WAP、自适应，我选择使用自适应的那份代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--PC和WAP自适应版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"SOHUCS"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">  (function()&#123; </span></span><br><span class="line"><span class="undefined">    var appid = '畅言帐号提供的应用ID'; </span></span><br><span class="line"><span class="undefined">    var conf  = '畅言帐号提供的配置ID'; </span></span><br><span class="line"><span class="undefined">    var width = window.innerWidth || document.documentElement.clientWidth; </span></span><br><span class="line"><span class="undefined">    if (width &lt; 960) &#123; </span></span><br><span class="line"><span class="xml">      window.document.write('<span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"changyan_mobile_js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&amp;conf=' + conf + '"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">\</span>/<span class="attr">script</span>&gt;</span>');</span></span></span><br><span class="line"><span class="undefined">    &#125; else &#123;</span></span><br><span class="line"><span class="undefined">        var loadJs=function(d, a) &#123;</span></span><br><span class="line"><span class="undefined">            var c = document.getElementsByTagName("head")[0] || document.head || document.documentElement;</span></span><br><span class="line"><span class="undefined">            var b = document.createElement("script");</span></span><br><span class="line"><span class="undefined">                b.setAttribute("type","text/javascript");</span></span><br><span class="line"><span class="undefined">                b.setAttribute("charset","UTF-8");</span></span><br><span class="line"><span class="undefined">                b.setAttribute("src",d);</span></span><br><span class="line"><span class="undefined">            if(typeof a === "function") &#123;</span></span><br><span class="line"><span class="undefined">                if(window.attachEvent) &#123;</span></span><br><span class="line"><span class="undefined">                    b.onreadystatechange = function() &#123;</span></span><br><span class="line"><span class="undefined">                        var e = b.readyState;</span></span><br><span class="line"><span class="undefined">                        if(e === "loaded" || e === "complete") &#123;</span></span><br><span class="line"><span class="undefined">                            b.onreadystatechange = null;</span></span><br><span class="line"><span class="undefined">                            a()</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                    b.onload =a</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            c.appendChild(b)</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        loadJs("https://changyan.sohu.com/upload/changyan.js", function() &#123;</span></span><br><span class="line"><span class="undefined">            window.changyan.api.config(&#123;appid:appid,conf:conf&#125;)</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码，嵌入到需要使用评论框的地方即可。</p><h2 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h2><p>到这里，任何在博客里评论的内容都能通过畅言的后台进行管理了，另外畅言还提供一些其他的互动功能，包括任务、点赞之类的功能也比较丰富。其次，畅言还提供一个chrome扩展用来方便的直接在博客页面管理评论。</p>]]></content>
      
      <categories>
          
          <category> Unclassified </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>test命令</title>
      <link href="/2017/06/23/linux/cmds/test/"/>
      <url>/2017/06/23/linux/cmds/test/</url>
      <content type="html"><![CDATA[<p>test命令在Linux下一般位置是/usr/bin/test，Mac系统下是shell内置指令。</p><p>test命令还有一个别名指令”[“，Linux下一般位置是”/usr/bin/[“，Mac系统下是shell内置指令。</p><h2 id="指令描述"><a href="#指令描述" class="headerlink" title="指令描述"></a>指令描述</h2><hr><p>作用：检查条件是否成立<br>方法：<code>test 条件</code> 或 <code>[ 条件 ]</code><br>用例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d ~ ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"It's a directory"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 或者以下</span></span><br><span class="line"><span class="built_in">test</span> -d ~ &amp;&amp; <span class="built_in">echo</span> <span class="string">"It's a directory"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="指令帮助"><a href="#指令帮助" class="headerlink" title="指令帮助"></a>指令帮助</h2><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">-b file       True if file exists and is a block special file.</span><br><span class="line"></span><br><span class="line">-c file       True if file exists and is a character special file.</span><br><span class="line"></span><br><span class="line">-d file       True if file exists and is a directory.</span><br><span class="line"></span><br><span class="line">-e file       True if file exists (regardless of type).</span><br><span class="line"></span><br><span class="line">-f file       True if file exists and is a regular file.</span><br><span class="line"></span><br><span class="line">-g file       True if file exists and its <span class="keyword">set</span> <span class="keyword">group</span> <span class="keyword">ID</span> flag <span class="keyword">is</span> set.</span><br><span class="line"></span><br><span class="line">-h <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> <span class="keyword">is</span> a symbolic link.  This <span class="keyword">operator</span> <span class="keyword">is</span> retained <span class="keyword">for</span> <span class="keyword">compatibility</span> <span class="keyword">with</span> previous <span class="keyword">versions</span> <span class="keyword">of</span> this program. <span class="keyword">Do</span> <span class="keyword">not</span> <span class="keyword">rely</span> <span class="keyword">on</span> its existence; <span class="keyword">use</span> -L instead.</span><br><span class="line"></span><br><span class="line">-k <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> its sticky <span class="built_in">bit</span> <span class="keyword">is</span> set.</span><br><span class="line"></span><br><span class="line">-n <span class="keyword">string</span>     <span class="literal">True</span> <span class="keyword">if</span> the <span class="keyword">length</span> <span class="keyword">of</span> <span class="keyword">string</span> <span class="keyword">is</span> nonzero.</span><br><span class="line"></span><br><span class="line">-p <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">is</span> a named <span class="keyword">pipe</span> (FIFO).</span><br><span class="line"></span><br><span class="line">-r <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> <span class="keyword">is</span> readable.</span><br><span class="line"></span><br><span class="line">-s <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> has a <span class="keyword">size</span> greater <span class="keyword">than</span> zero.</span><br><span class="line"></span><br><span class="line">-t file_descriptor</span><br><span class="line">           <span class="literal">True</span> <span class="keyword">if</span> the <span class="keyword">file</span> whose <span class="keyword">file</span> <span class="keyword">descriptor</span> <span class="built_in">number</span> <span class="keyword">is</span> file_descriptor <span class="keyword">is</span> <span class="keyword">open</span> <span class="keyword">and</span> <span class="keyword">is</span> associated <span class="keyword">with</span></span><br><span class="line">           a terminal.</span><br><span class="line"></span><br><span class="line">-u <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> its <span class="keyword">set</span> <span class="keyword">user</span> <span class="keyword">ID</span> flag <span class="keyword">is</span> set.</span><br><span class="line"></span><br><span class="line">-w <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> <span class="keyword">is</span> writable.  <span class="literal">True</span> indicates <span class="keyword">only</span> that the write flag <span class="keyword">is</span> on.  The <span class="keyword">file</span></span><br><span class="line">           <span class="keyword">is</span> <span class="keyword">not</span> writable <span class="keyword">on</span> a <span class="keyword">read</span>-<span class="keyword">only</span> <span class="keyword">file</span> <span class="keyword">system</span> even <span class="keyword">if</span> this <span class="keyword">test</span> indicates true.</span><br><span class="line"></span><br><span class="line">-x <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> <span class="keyword">is</span> executable.  <span class="literal">True</span> indicates <span class="keyword">only</span> that the <span class="keyword">execute</span> flag <span class="keyword">is</span> on.  <span class="keyword">If</span></span><br><span class="line">           <span class="keyword">file</span> <span class="keyword">is</span> a <span class="keyword">directory</span>, <span class="literal">true</span> indicates that <span class="keyword">file</span> can be searched.</span><br><span class="line"></span><br><span class="line">-z <span class="keyword">string</span>     <span class="literal">True</span> <span class="keyword">if</span> the <span class="keyword">length</span> <span class="keyword">of</span> <span class="keyword">string</span> <span class="keyword">is</span> zero.</span><br><span class="line"></span><br><span class="line">-L <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> <span class="keyword">is</span> a symbolic link.</span><br><span class="line"></span><br><span class="line">-O <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> its owner matches the effective <span class="keyword">user</span> <span class="keyword">id</span> <span class="keyword">of</span> this process.</span><br><span class="line"></span><br><span class="line">-G <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> its <span class="keyword">group</span> matches the effective <span class="keyword">group</span> <span class="keyword">id</span> <span class="keyword">of</span> this process.</span><br><span class="line"></span><br><span class="line">-S <span class="keyword">file</span>       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">file</span> <span class="keyword">exists</span> <span class="keyword">and</span> <span class="keyword">is</span> a socket.</span><br><span class="line"></span><br><span class="line">file1 -nt file2</span><br><span class="line">           <span class="literal">True</span> <span class="keyword">if</span> file1 <span class="keyword">exists</span> <span class="keyword">and</span> <span class="keyword">is</span> newer <span class="keyword">than</span> file2.</span><br><span class="line"></span><br><span class="line">file1 -ot file2</span><br><span class="line">           <span class="literal">True</span> <span class="keyword">if</span> file1 <span class="keyword">exists</span> <span class="keyword">and</span> <span class="keyword">is</span> older <span class="keyword">than</span> file2.</span><br><span class="line"></span><br><span class="line">file1 -ef file2</span><br><span class="line">           <span class="literal">True</span> <span class="keyword">if</span> file1 <span class="keyword">and</span> file2 exist <span class="keyword">and</span> refer <span class="keyword">to</span> the same file.</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span>        <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">string</span> <span class="keyword">is</span> <span class="keyword">not</span> the <span class="literal">null</span> string.</span><br><span class="line"></span><br><span class="line">s1 = s2       <span class="literal">True</span> <span class="keyword">if</span> the strings s1 <span class="keyword">and</span> s2 <span class="keyword">are</span> identical.</span><br><span class="line"></span><br><span class="line">s1 != s2      <span class="literal">True</span> <span class="keyword">if</span> the strings s1 <span class="keyword">and</span> s2 <span class="keyword">are</span> <span class="keyword">not</span> identical.</span><br><span class="line"></span><br><span class="line">s1 &lt; s2       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">string</span> s1 comes <span class="keyword">before</span> s2 based <span class="keyword">on</span> the <span class="keyword">ASCII</span> <span class="keyword">value</span> <span class="keyword">of</span> their characters.</span><br><span class="line"></span><br><span class="line">s1 &gt; s2       <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">string</span> s1 comes <span class="keyword">after</span> s2 based <span class="keyword">on</span> the <span class="keyword">ASCII</span> <span class="keyword">value</span> <span class="keyword">of</span> their characters.</span><br><span class="line"></span><br><span class="line">n1 -eq n2     <span class="literal">True</span> <span class="keyword">if</span> the integers n1 <span class="keyword">and</span> n2 <span class="keyword">are</span> algebraically equal.</span><br><span class="line"></span><br><span class="line">n1 -ne n2     <span class="literal">True</span> <span class="keyword">if</span> the integers n1 <span class="keyword">and</span> n2 <span class="keyword">are</span> <span class="keyword">not</span> algebraically equal.</span><br><span class="line"></span><br><span class="line">n1 -gt n2     <span class="literal">True</span> <span class="keyword">if</span> the <span class="built_in">integer</span> n1 <span class="keyword">is</span> algebraically greater <span class="keyword">than</span> the <span class="built_in">integer</span> n2.</span><br><span class="line"></span><br><span class="line">n1 -ge n2     <span class="literal">True</span> <span class="keyword">if</span> the <span class="built_in">integer</span> n1 <span class="keyword">is</span> algebraically greater <span class="keyword">than</span> <span class="keyword">or</span> equal <span class="keyword">to</span> the <span class="built_in">integer</span> n2.</span><br><span class="line"></span><br><span class="line">n1 -lt n2     <span class="literal">True</span> <span class="keyword">if</span> the <span class="built_in">integer</span> n1 <span class="keyword">is</span> algebraically <span class="keyword">less</span> <span class="keyword">than</span> the <span class="built_in">integer</span> n2.</span><br><span class="line"></span><br><span class="line">n1 -le n2     <span class="literal">True</span> <span class="keyword">if</span> the <span class="built_in">integer</span> n1 <span class="keyword">is</span> algebraically <span class="keyword">less</span> <span class="keyword">than</span> <span class="keyword">or</span> equal <span class="keyword">to</span> the <span class="built_in">integer</span> n2.</span><br><span class="line"></span><br><span class="line">These primaries can be combined <span class="keyword">with</span> the <span class="keyword">following</span> operators:</span><br><span class="line"></span><br><span class="line">! expression  <span class="literal">True</span> <span class="keyword">if</span> expression <span class="keyword">is</span> false.</span><br><span class="line"></span><br><span class="line">expression1 -a expression2</span><br><span class="line">           <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">both</span> expression1 <span class="keyword">and</span> expression2 <span class="keyword">are</span> true.</span><br><span class="line"></span><br><span class="line">expression1 -o expression2</span><br><span class="line">           <span class="literal">True</span> <span class="keyword">if</span> either expression1 <span class="keyword">or</span> expression2 <span class="keyword">are</span> true.</span><br><span class="line"></span><br><span class="line">(expression)  <span class="literal">True</span> <span class="keyword">if</span> expression <span class="keyword">is</span> true.</span><br><span class="line"></span><br><span class="line">The -a <span class="keyword">operator</span> has higher precedence <span class="keyword">than</span> the -o operator.</span><br></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><hr><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The test utility exits <span class="keyword">with</span> <span class="literal">one</span> <span class="keyword">of</span> <span class="keyword">the</span> following values:</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>       expression evaluated <span class="built_in">to</span> <span class="literal">true</span>.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>       expression evaluated <span class="built_in">to</span> <span class="literal">false</span> <span class="keyword">or</span> expression was missing.</span><br><span class="line"></span><br><span class="line">&gt;<span class="number">1</span>      An error occurred.</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>top命令</title>
      <link href="/2017/01/22/linux/cmds/top/"/>
      <url>/2017/01/22/linux/cmds/top/</url>
      <content type="html"><![CDATA[<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p><p>top显示系统当前的进程和其他状况,是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止. 比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。</p><h2 id="显示样例"><a href="#显示样例" class="headerlink" title="显示样例"></a>显示样例</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">top - 16:38:41 up 7 days,  2:08,  1 user,  load average: 0.00, 0.00, 0.00</span><br><span class="line">Tasks:   7 total,   1 running,   6 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Mem:   2047428k total,   316208k used,  1731220k free,    17088k buffers</span><br><span class="line">Swap:  4093948k total,        0k used,  4093948k free,   186184k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line">    1 root      20   0  3128 1344 1044 S  0.0  0.1   0:00.06 init</span><br><span class="line">    9 root      20   0 97.7m  15m 6032 S  0.0  0.8   0:01.61 supervisord</span><br><span class="line">   12 root      20   0 66296 5748 5032 S  0.0  0.3   0:00.02 sshd</span><br><span class="line">   14 root      20   0  167m 2584 2220 S  0.0  0.1   0:00.10 rsyslogd</span><br><span class="line">   34 root      20   0 98496 6988 5996 S  0.0  0.3   0:00.03 sshd</span><br><span class="line">   36 root      20   0 13032 3080 2744 S  0.0  0.2   0:00.00 bash</span><br><span class="line">   47 root      20   0 14948 1972 1764 R  0.0  0.1   0:00.00 top</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="各项信息解释"><a href="#各项信息解释" class="headerlink" title="各项信息解释"></a>各项信息解释</h2><hr><h3 id="统计信息区"><a href="#统计信息区" class="headerlink" title="统计信息区"></a>统计信息区</h3><ol><li><strong>系统整体状况</strong></li></ol><ul><li><em>16:38:41</em>: 当前系统时间</li><li><em>up 7 days,  2:08</em>: 系统运行时间，即从启动开始到现在为止运行多长时间</li><li><em>1 user</em>: 当前登录用户数量</li><li><em>load average: 0.00, 0.00, 0.00</em>: 系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</li></ul><ol start="2"><li><strong>进程信息</strong></li></ol><ul><li><em>7 total</em>: 进程总数</li><li><em>1 running</em>: 正在运行中的进程数</li><li><em>6 sleeping</em>: 睡眠中的进程数</li><li><em>0 stopped</em>: 停止的进程数</li><li><em>0 zombie</em>: 僵尸进程数</li></ul><ol start="3"><li><strong>CPU信息</strong></li></ol><ul><li><em>0.0%us</em>: 用户空间占用cpu百分比</li><li><em>0.0%sy</em>: 内核空间占用cpu百分比</li><li><em>0.0%ni</em>: 用户进程空间内改变过优先级的进程占用cpu百分比</li><li><em>100.0%id</em>: 空间cpu百分比</li><li><em>0.0%wa</em>: 等待输入输出的cpu时间百分比</li><li><em>0.0%hi</em>: 硬中断占用百分比</li><li><em>0.0%si</em>: 软中断占用百分比</li><li><em>0.0%st</em>: 虚拟机占用百分比</li></ul><ol start="4"><li><strong>内存信息</strong></li></ol><ul><li><em>2047428k total</em>: 物理内存总量</li><li><em>316208k used</em>: 已用物理内存总量</li><li><em>1731220k free</em>: 空闲内存总量</li><li><em>17088k buffers</em>: 用于内核缓存的内存使用量</li></ul><ol start="5"><li><strong>交换分区信息</strong></li></ol><ul><li><em>4093948k total</em>: 交换区总量</li><li><em>0k used</em>: 使用的交换区总量</li><li><em>4093948k free</em>: 空闲交换区总量</li><li><em>186184k cached</em>: 缓冲的交换区总量,内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入</li></ul><h3 id="进程信息区"><a href="#进程信息区" class="headerlink" title="进程信息区"></a>进程信息区</h3><ul><li><strong>PID</strong>: 进程id</li><li><strong>USER</strong>: 进程所有者的用户名</li><li><strong>PR</strong>: 优先级</li><li><strong>NI</strong>: 负值表示高优先级，正值表示低优先级</li><li><strong>VIRT</strong>: 进程使用的虚拟内存总量，单位kb</li><li><strong>RES</strong>: 进程使用的、未被换出的物理内存大小</li><li><strong>SHR</strong>: 共享内存大小，单位kb</li><li><strong>S</strong>: 进程状态(D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程)</li><li><strong>%CPU</strong>: 上次更新到现在的CPU时间占用百分比</li><li><strong>%MEM</strong>: 进程使用的物理内存百分比</li><li><strong>TIME+</strong>: 进程使用的CPU时间总计，单位1/100秒</li><li><strong>COMMAND</strong>: 命令名/命令行</li></ul><h2 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h2><hr><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><ol><li><p><strong>Usage</strong>: <code>top -hv | -abcHimMsS -d delay -n iterations [-u user | -U user] -p pid [,pid ...]</code></p></li><li><p><strong><em>常用参数说明</em></strong></p></li></ol><ul><li><em>d</em>: 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。 </li><li><em>p</em>: 通过指定监控进程ID来仅仅监控某个进程的状态。 </li><li><em>q</em>: 该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。 </li><li><em>S</em>: 指定累计模式 </li><li><em>s</em>: 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。 </li><li><em>i</em>: 使top不显示任何闲置或者僵死进程。 </li><li><em>c</em>: 显示整个命令行而不只是显示命令名</li></ul><h3 id="交互指令"><a href="#交互指令" class="headerlink" title="交互指令"></a>交互指令</h3><ul><li><strong>h|?</strong>: 显示帮助画面，给出一些简短的命令总结说明。</li><li><strong>k</strong>: 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。 </li><li><strong>i</strong>: 忽略闲置和僵死进程。这是一个开关式命令。 </li><li><strong>q</strong>: 退出程序。 </li><li><strong>r</strong>: 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。 </li><li><strong>S</strong>: 切换到累计模式。 </li><li><strong>s</strong>: 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。 </li><li><strong>f|F</strong>: 从当前显示中添加或者删除项目。 </li><li><strong>o|O</strong>: 改变显示项目的顺序。 </li><li><strong>l</strong>: 切换显示平均负载和启动时间信息。 </li><li><strong>m</strong>: 切换显示内存信息。 </li><li><strong>t</strong>: 切换显示进程和CPU状态信息。 </li><li><strong>c</strong>: 切换显示命令名称和完整命令行。 </li><li><strong>M</strong>: 根据驻留内存大小进行排序。 </li><li><strong>P</strong>: 根据CPU使用百分比大小进行排序。 </li><li><strong>T</strong>: 根据时间/累计时间进行排序。 </li><li><strong>W</strong>: 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</li></ul>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>借助Hexo搭建静态博客</title>
      <link href="/2017/01/19/blog/static_blog/"/>
      <url>/2017/01/19/blog/static_blog/</url>
      <content type="html"><![CDATA[<p>静态博客顾名思义就是博客内容是静态的html页面，不是由服务器程序(php、java等等)生成的页面，而是由专门的生成系统工具根据博客内容加上指定的模版生成的一套静态页面。</p><p><strong>静态博客的特点</strong></p><ul><li>部署方便局限性小，因为是静态页面，因此只需要提供一个能访问的web空间即可，目前大部分的git平台都 <strong>免费</strong> 提供这么一个服务，让用户可以将静态页面托管在服务器上提供外部访问</li><li>对于静态博客而言，方便部署是一个优势，但静态页面总会缺乏交互性，没有数据库，没有服务器的应答脚本，但是做为普通的个人博客却已经足够了</li></ul><a id="more"></a><h2 id="Hexo静态博客生成工具"><a href="#Hexo静态博客生成工具" class="headerlink" title="Hexo静态博客生成工具"></a>Hexo静态博客生成工具</h2><hr><p><a href="//hexo.io">Hexo</a>是基于nodejs的一套静态博客生成工具，可以很方便的创建一套静态博客框架，并基于博客内容生成静态页面，官网网站也提供一些常用的<a href="//hexo.io/themes">Hexo主题</a>。</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li><code>hexo init [folder]</code> <em>在指定目录下，初始化一套博客框架</em></li><li><code>hexo new [layout] &lt;title&gt;</code> <em>新建博客文档</em></li><li><code>hexo generate</code> <em>生成静态页面</em></li><li><code>hexo server</code> <em>在本地开启web站点，用于本地查看页面效果</em></li><li><code>hexo deploy</code> <em>将博客的静态页面部署至外网服务器</em></li></ul><h3 id="解决博客响应速度慢问题"><a href="#解决博客响应速度慢问题" class="headerlink" title="解决博客响应速度慢问题"></a>解决博客响应速度慢问题</h3><p>最开始我的博客都是放在github上进行托管，但是github对于国内而言，访问速度总不是特别理想，有朋友反馈说打不开我的博客，我一想大概就知道是github的响应慢导致的，于是就想把博客托管在多个平台上，对外提供访问，选来选去，还是选择了coding做为国内博客托管平台, 主要原因还是之前用过coding。</p><p>要想博客分担在不同的平台上，域名还只有一个，想了想，我的域名托管服务平台提供智能DNS，默认访问coding平台，国外IP访问github平台，完美解决。</p>]]></content>
      
      <categories>
          
          <category> Unclassified </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ShellCode For LoadLibrary</title>
      <link href="/2016/05/12/windows/rootkit/shellcode/"/>
      <url>/2016/05/12/windows/rootkit/shellcode/</url>
      <content type="html"><![CDATA[<ul><li>方便快速注入插件，又增加可移植性，将必要的系统接口通过参数传递到函数内</li><li>使用时正确初始化参数，然后将函数的内存code与参数一起拷贝到指定进程中</li><li><code>LoadClientLibrary</code>使用裸函数约定，结束标志方便定位函数总内存长度</li></ul><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(push, 1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    DWORD   SizeOfParameter: <span class="number">32</span>;</span><br><span class="line">    CHAR    Buffer[<span class="number">1024</span>];</span><br><span class="line">&#125; CALLBACK_PROC_PARAMETER, *PCALLBACK_PROC_PARAMETER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 系统接口 */</span></span><br><span class="line">    HMODULE (WINAPI *LoadLibrary)(__IN LPCSTR);</span><br><span class="line">    FARPROC (WINAPI *GetProcAddress)(__IN HMODULE, __IN LPCSTR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注入信息 */</span></span><br><span class="line">    CHAR InjectLibrary[MAX_PATH];</span><br><span class="line">    CHAR  InjectProcedure[<span class="number">100</span>];</span><br><span class="line">    CALLBACK_PROC_PARAMETER CommandLine;</span><br><span class="line"></span><br><span class="line">&#125; REMOTE_THREAD_PARAM, *PREMOTE_THREAD_PARAM;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(pop)</span></span><br><span class="line"></span><br><span class="line">__<span class="function">NAKED BOOL WINAPI <span class="title">LoadClientLibrary</span><span class="params">(__IN PREMOTE_THREAD_PARAM lpThreadParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 函数开始</span></span><br><span class="line">        push ebp</span><br><span class="line">        mov ebp, esp</span><br><span class="line">        <span class="comment">// 分配变量</span></span><br><span class="line">        sub esp, <span class="number">0x08</span></span><br><span class="line">        <span class="comment">// [ebp - 0x04]: ClientLibrary</span></span><br><span class="line">        <span class="comment">// [ebp - 0x08]: ClientProcedure</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 程序代码</span></span><br><span class="line">        xor eax, eax</span><br><span class="line"></span><br><span class="line">        push ebx</span><br><span class="line">        push ecx</span><br><span class="line">        push edx</span><br><span class="line">        push edi</span><br><span class="line">        push esi</span><br><span class="line"></span><br><span class="line">        mov esi, lpThreadParameter</span><br><span class="line">        lea eax, [esi + <span class="number">0x08</span>]</span><br><span class="line">        </span><br><span class="line">        push eax</span><br><span class="line">        call [esi]</span><br><span class="line"></span><br><span class="line">        cmp eax, <span class="number">0</span></span><br><span class="line">        je __EXIT_LABEL</span><br><span class="line"></span><br><span class="line">        mov [ebp - <span class="number">0x04</span>], eax</span><br><span class="line"></span><br><span class="line">        lea eax, [esi + <span class="number">0x0000010C</span>]</span><br><span class="line">        push eax</span><br><span class="line">        push [ebp - <span class="number">0x04</span>]</span><br><span class="line">        call [esi + <span class="number">0x04</span>]</span><br><span class="line"></span><br><span class="line">        cmp eax, <span class="number">0</span></span><br><span class="line">        je __EXIT_LABEL</span><br><span class="line">        </span><br><span class="line">        mov [ebp - <span class="number">0x08</span>], eax</span><br><span class="line"></span><br><span class="line">        lea eax, [esi + <span class="number">0x00000170</span>]</span><br><span class="line">        push eax</span><br><span class="line">        call [ebp - <span class="number">0x08</span>]</span><br><span class="line"></span><br><span class="line">__EXIT_LABEL:</span><br><span class="line">        pop esi</span><br><span class="line">        pop edi</span><br><span class="line">        pop edx</span><br><span class="line">        pop ecx</span><br><span class="line">        pop ebx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 销毁变量</span></span><br><span class="line">        add esp, <span class="number">0x08</span></span><br><span class="line">        <span class="comment">// 函数结束</span></span><br><span class="line">        mov esp, ebp</span><br><span class="line">        pop ebp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 返回并清除堆栈参数</span></span><br><span class="line">        ret <span class="number">0x04</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结束标志</span></span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        __emit <span class="number">0x19</span></span><br><span class="line">        __emit <span class="number">0x90</span></span><br><span class="line">        __emit <span class="number">0x04</span></span><br><span class="line">        __emit <span class="number">0x03</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows系统服务描述表</title>
      <link href="/2014/09/13/windows/kernel/ke_service_descriptor_table/"/>
      <url>/2014/09/13/windows/kernel/ke_service_descriptor_table/</url>
      <content type="html"><![CDATA[<h2 id="Win32下获取系统服务描述表的方法"><a href="#Win32下获取系统服务描述表的方法" class="headerlink" title="Win32下获取系统服务描述表的方法"></a>Win32下获取系统服务描述表的方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PSYSTEM_SERVICE_DESCRIPTOR_TABLE <span class="title">KeGetServiceDescriptorTable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 结果值</span></span><br><span class="line">    PSYSTEM_SERVICE_DESCRIPTOR_TABLE ServiceDescriptorTable = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    __asm </span><br><span class="line">    &#123;</span><br><span class="line">        push eax</span><br><span class="line">        push ebx</span><br><span class="line">        push OffsetKthreadServiceTable</span><br><span class="line">        call OffsetGet</span><br><span class="line">        mov ebx, eax</span><br><span class="line">        mov eax, dword ptr fs:[<span class="number">0x124</span>]</span><br><span class="line">        add eax, ebx</span><br><span class="line">        mov eax, dword ptr [eax]</span><br><span class="line">        mov ServiceDescriptorTable,eax </span><br><span class="line">        pop ebx</span><br><span class="line">        pop eax</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ServiceDescriptorTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>OffsetGet这个自定义函数是为了兼容多系统版本，根据常量OffsetKthreadServiceTable的值来获取对应偏移</li><li>在驱动入口函数DriverEntry中获取的是SSDT，<a href="//www.baidu.com/s?wd=DeviceIoControl">DeviceIoControl</a>访问时，获取的是才是完整版<a href="//www.baidu.com/s?wd=KeServiceDescriptorTable">KeServiceDescriptorTable</a></li></ul><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/* 获取系统服务描述表(SSDT Shadow)                                        */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="function">PSERVICE_TABLE_DESCRIPTOR <span class="title">KeGetServiceDescriptorTableShadow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PUCHAR Pos;</span><br><span class="line">    PUCHAR BeginPos = (PUCHAR)KeAddSystemServiceTable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> PSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTableShadow = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回现有值</span></span><br><span class="line">    <span class="keyword">if</span>(KeServiceDescriptorTableShadow)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> KeServiceDescriptorTableShadow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Search</span></span><br><span class="line">    <span class="keyword">for</span>(Pos = BeginPos; Pos &lt; BeginPos + PAGE_SIZE; ++Pos)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!MmIsAddressValid(Pos))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        KeServiceDescriptorTableShadow = (PSERVICE_TABLE_DESCRIPTOR)(*(PULONG)Pos);</span><br><span class="line">        <span class="keyword">if</span> (!MmIsAddressValid((PVOID)KeServiceDescriptorTableShadow))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">memcmp</span>((PVOID)KeServiceDescriptorTableShadow, &amp;KeServiceDescriptorTable[<span class="number">0</span>], <span class="keyword">sizeof</span>(SERVICE_TABLE_DESCRIPTOR)) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((PVOID)KeServiceDescriptorTableShadow == (PVOID)&amp;KeServiceDescriptorTable[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> KeServiceDescriptorTableShadow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> KeServiceDescriptorTableShadow = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2016年新加的获取方式，用的比较多</li></ul>]]></content>
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows内核 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
